@page "/"

<SpinLoader IsLoading="!isLoaded">
    <LoadingTemplate>
        <div style="position:fixed; top:50%;right:50%;">
            <Wave Center="true" Color="#5DADE2" Size="70px"></Wave>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <TableInfo CurrentPage="@currentPage" FilteredItemsCount="@FilteredItems.Count" ItemsCount="@Items.Count" PageSize="@pageSize" TotalPages="@totalPages"></TableInfo>

        <div class="row">
            <select @bind="@PageSize" class="form-control col-1" style="width:auto;">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>

            <div class="col-11"><Paging CurrentPage="@currentPage" TotalPages="@totalPages" OnClick="@OnPageChanged" Radius="@radius"></Paging></div>
        </div>

        <TableTemplate Items="@FilteredItems" TotalNbrOfItems="@Items.Count()" CurrentPage="@currentPage" TotalNbrOfPages="@totalPages">
            <TableHeader>
                <th scope="col">#</th>
                <GridColumn ColumnDefinition="@(ColumnDefinitions.SingleOrDefault(x=>x.DataField == "FirstName"))"
                            OnSearchTextChanged="@(e => onFilter(e, ColumnDefinitions.SingleOrDefault(x=>x.DataField == "FirstName")))"
                            OnSort="@OnSort"></GridColumn>
                <GridColumn ColumnDefinition="@(ColumnDefinitions.SingleOrDefault(x=>x.DataField == "LastName"))"
                            OnSearchTextChanged="@(e => onFilter(e, ColumnDefinitions.SingleOrDefault(x=>x.DataField == "LastName")))"
                            OnSort="@OnSort"></GridColumn>

                <AuthorizeView>
                    <Authorized>
                        <th>Actions</th>
                    </Authorized>
                </AuthorizeView>
            </TableHeader>

            <RowTemplate Context="item">
                <td>@item.Id</td>
                @*<td>@(rowCount++)</td>*@
                <td>@item.FirstName</td>
                <td>@item.LastName</td>

                <AuthorizeView>
                    <Authorized>
                        <td></td>
                    </Authorized>
                </AuthorizeView>
            </RowTemplate>
        </TableTemplate>

        <Paging CurrentPage="@currentPage" TotalPages="@totalPages" OnClick="@OnPageChanged" Radius="@radius"></Paging>

    </ContentTemplate>
</SpinLoader>

@code{
    private List<Employee> Items { get; set; } = new List<Employee>();
    private List<Employee> FilteredItems { get; set; } = new List<Employee>();

    private List<ColumnDefinition> ColumnDefinitions { get; set; } = new List<ColumnDefinition>();

    //private int rowCount = 1;

    private int currentPage = 1;
    private int pageSize = 100;
    public int PageSize
    {
        get { return pageSize; }
        set {
            pageSize = value;

            currentPage = 1;
            load();
        }
    }

    private int totalPages = 0;
    private int radius = 3;

    private bool isLoaded = false;

    protected override void OnInitialized()
    {
        ColumnDefinitions.Add(new ColumnDefinition { DataField = "FirstName", ColumnTitle = "First Name", PlaceHolder = "Search First Name", Searchable = true, Sortable = true });
        ColumnDefinitions.Add(new ColumnDefinition { DataField = "LastName", ColumnTitle = "Last Name", PlaceHolder = "Search Last Name", Searchable = true, Sortable = true });

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() => longRunningOperation());

            isLoaded = true;

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void longRunningOperation()
    {
        //seed data
        if (Items == null || !Items.Any())
        {
            Items = new List<Employee>();
            for (int i = 1; i <= 10000000; i++)
            //for (int i = 1; i <= 1000; i++)
            {
                Items.Add(new Employee { Id = i, FirstName = "First Name " + i.ToString(), LastName = "Last Name " + i.ToString(), });
            }
        }

        var query = Items.AsQueryable();

        totalPages = (int)Math.Ceiling(query.Count() / (decimal)pageSize);

        FilteredItems = query.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void onFilter(ChangeEventArgs e, ColumnDefinition columnDefinition)
    {
        string searchText = e.Value.ToString();

        columnDefinition.SearchText = searchText;

        currentPage = 1;

        load();
    }

    private void OnPageChanged(int pageNumber)
    {
        if (pageNumber < 1)
            currentPage = 1;
        else if (pageNumber > totalPages)
            currentPage = totalPages;
        else
            currentPage = pageNumber;

        load();
    }

    private void OnSort(string dataField)
    {
        var columnDefinition = ColumnDefinitions.SingleOrDefault(x => x.DataField == dataField);
        if (columnDefinition.SortDirection == SortDirection.NotSet)
        {
            columnDefinition.SortDirection = SortDirection.Asc;
        }
        else if (columnDefinition.SortDirection == SortDirection.Asc)
        {
            columnDefinition.SortDirection = SortDirection.Desc;
        }
        else if (columnDefinition.SortDirection == SortDirection.Desc)
        {
            columnDefinition.SortDirection = SortDirection.Asc;
        }

        //reset other
        var columnDefinitions = ColumnDefinitions.Where(x => x.DataField != dataField).ToList();
        columnDefinitions.ForEach(x => x.SortDirection = SortDirection.NotSet);

        load();
    }

    private void load()
    {
        var query = Items.AsQueryable();

        //filter
        foreach (var columnDefinition in ColumnDefinitions)
        {
            if (columnDefinition.DataField == "FirstName")
            {
                if (!string.IsNullOrEmpty(columnDefinition.SearchText))
                {
                    query = query.Where(x => x.FirstName.ToLower().Contains(columnDefinition.SearchText.ToLower()));
                }
            }
            else if (columnDefinition.DataField == "LastName")
            {
                if (!string.IsNullOrEmpty(columnDefinition.SearchText))
                {
                    query = query.Where(x => x.LastName.ToLower().Contains(columnDefinition.SearchText.ToLower()));
                }
            }
        }

        //sort
        var sortedColumn = ColumnDefinitions.SingleOrDefault(x => x.SortDirection != SortDirection.NotSet);

        if (sortedColumn != null)
        {
            if (sortedColumn.DataField == "FirstName")
            {
                if (sortedColumn.SortDirection == SortDirection.Asc)
                {
                    query = query.OrderBy(x => x.FirstName);
                }
                else if (sortedColumn.SortDirection == SortDirection.Desc)
                {
                    query = query.OrderByDescending(x => x.FirstName);
                }
            }
            else if (sortedColumn.DataField == "LastName")
            {
                if (sortedColumn.SortDirection == SortDirection.Asc)
                {
                    query = query.OrderBy(x => x.LastName);
                }
                else if (sortedColumn.SortDirection == SortDirection.Desc)
                {
                    query = query.OrderByDescending(x => x.LastName);
                }
            }
        }

        //result
        FilteredItems = query.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

        totalPages = (int)Math.Ceiling(query.Count() / (decimal)pageSize);
    }
}